variables:
  GIT_DEPTH: 5

stages:
  - test
  - build
  - deploy

test:
  image: node:10-alpine
  script:
    - npm ci
    - npm test
  only:
    changes:
      - __tests__/**/*
      - src/**/*

docker:image:
  stage: build
  variables:
    # When using dind service we need to instruct docker, to talk
    # with the daemon started inside of the service. The daemon is
    # available with a network connection instead of the default
    # /var/run/docker.sock socket.
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay
    # This will instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  before_script:
    - echo $CI_BUILD_TOKEN | docker login -u gitlab-ci-token $CI_REGISTRY --password-stdin
  script:
    - export TAG=$([[ $CI_COMMIT_REF_NAME = 'master' ]] && echo "latest" || echo $CI_COMMIT_REF_SLUG)
    - docker pull $CI_REGISTRY_IMAGE:$TAG || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:$TAG -t $CI_REGISTRY_IMAGE:$TAG .
    - docker push $CI_REGISTRY_IMAGE:$TAG
  only:
    changes:
      - src/**/*
      - Dockerfile
      - .gitlab-ci.yml
      - .dockerignore

.deploys:
  image: bozdoz/fabric-deployment
  stage: deploy
  script:
    - fab gitpull npmbuild
  after_script:
    - apk add curl
    - |
      curl "https://api.cloudflare.com/client/v4/zones/$CF_ZONE/purge_cache" \
      -H "Authorization: Bearer $CF_TOKEN" \
      -H "Content-Type: application/json" \
      -d "{\"purge_everything\": true}"

deploy:
  extends:
    - .deploys
  variables:
    CWD: ~/bozdoz.com/v2
  environment:
    name: production
    url: https://bozdoz.com
  only:
    - master

deploy_staging:
  extends:
    - .deploys
  variables:
    CWD: ~/staging-bozdoz/staging-bozdoz
  environment:
    name: staging
    url: https://staging.bozdoz.com
  only:
    - staging
